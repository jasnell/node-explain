{
  "_pattern": "^ERR_.+$",
  "_base_url": "https://nodejs.org/dist/latest-v8.x/docs/api/errors.html",
  "ERR_ASSERTION": {
    "en": "The `ERR_ASSERTION` error code is used generally to identify assertion errors generated by Node.js' `assert` module."
  },
  "ERR_ARG_NOT_ITERABLE": {
    "en": "Used generically to identify that an iterable argument (i.e. a value that works with for...of loops) is required, but not provided to a Node.js API."
  },
  "ERR_CONSOLE_WRITABLE_STREAM": {
    "en": "Used when Console is instantiated without stdout stream or when stdout or stderr streams are not writable."
  },
  "ERR_FALSY_VALUE_REJECTION": {
    "en": "The ERR_FALSY_VALUE_REJECTION error code is used by the util.callbackify() API when a callbackified Promise is rejected with a falsy value (e.g. null)."
  },
  "ERR_INDEX_OUT_OF_RANGE": {
    "en": "Used when a given index is out of the accepted range."
  },
  "ERR_INVALID_ARG_TYPE": {
    "en": "Used generically to identify that an argument of the wrong type has been passed to a Node.js API."
  },
  "ERR_INVALID_CALLBACK": {
    "en": "Used generically to identify that a callback function is required and has not been provided to a Node.js API."
  },
  "ERR_INVALID_CURSOR_POS": {
    "en": "The 'ERR_INVALID_CURSOR_POS' is thrown specifically when a cursor on a given stream is attempted to move to a specified row without a specified column."
  },
  "ERR_INVALID_FILE_URL_HOST": {
    "en": "Used when a Node.js API that consumes file: URLs (such as certain functions in the fs module) encounters a file URL with an incompatible host. Currently, this situation can only occur on Unix-like systems, where only localhost or an empty host is supported."
  },
  "ERR_INVALID_FILE_URL_PATH": {
    "en": "Used when a Node.js API that consumes file: URLs (such as certain functions in the fs module) encounters a file URL with an incompatible path. The exact semantics for determining whether a path can be used is platform-dependent."
  },
  "ERR_INVALID_HANDLE_TYPE": {
    "en": "Used when an attempt is made to send an unsupported 'handle' over an IPC communication channel to a child process. See child.send() and process.send() for more information."
  },
  "ERR_INVALID_OPT_VALUE": {
    "en": "Used generically to identify when an invalid or unexpected value has been passed in an options object."
  },
  "ERR_INVALID_REPL_EVAL_CONFIG": {
    "en": "Used when both breakEvalOnSigint and eval options are set in the REPL config, which is not supported."
  },
  "ERR_INVALID_SYNC_FORK_INPUT": {
    "en": "Used when a Buffer, Uint8Array or string is provided as stdio input to a synchronous fork. See the documentation for the child_process module for more information."
  },
  "ERR_INVALID_THIS": {
    "en": "Used generically to identify that a Node.js API function is called with an incompatible this value.\n\nExample:\n\nconst { URLSearchParams } = require('url');\nconst urlSearchParams = new URLSearchParams('foo=bar&baz=new');\n\nconst buf = Buffer.alloc(1);\nurlSearchParams.has.call(buf, 'foo');\n  // Throws a TypeError with code 'ERR_INVALID_THIS'"
  },
  "ERR_INVALID_TUPLE": {
    "en": "Used when an element in the iterable provided to the WHATWG URLSearchParamsconstructor does not represent a [name, value] tuple â€“ that is, if an element is not iterable, or does not consist of exactly two elements."
  },
  "ERR_INVALID_URL": {
    "en": "Used when an invalid URL is passed to the WHATWG URL constructor to be parsed. The thrown error object typically has an additional property 'input' that contains the URL that failed to parse."
  },
  "ERR_INVALID_URL_SCHEME": {
    "en": "Used generically to signify an attempt to use a URL of an incompatible scheme (aka protocol) for a specific purpose. It is currently only used in the WHATWG URL API support in the fs module (which only accepts URLs with 'file' scheme), but may be used in other Node.js APIs as well in the future."
  },
  "ERR_IPC_CHANNEL_CLOSED": {
    "en": "Used when an attempt is made to use an IPC communication channel that has already been closed."
  },
  "ERR_IPC_DISCONNECTED": {
    "en": "Used when an attempt is made to disconnect an already disconnected IPC communication channel between two Node.js processes. See the documentation for the child_process module for more information."
  },
  "ERR_IPC_ONE_PIPE": {
    "en": "Used when an attempt is made to create a child Node.js process using more than one IPC communication channel. See the documentation for the child_process module for more information."
  },
  "ERR_IPC_SYNC_FORK": {
    "en": "Used when an attempt is made to open an IPC communication channel with a synchronous forked Node.js process. See the documentation for the child_process module for more information."
  },
  "ERR_MISSING_ARGS": {
    "en": "Used when a required argument of a Node.js API is not passed. This is currently only used in the WHATWG URL API for strict compliance with the specification (which in some cases may accept func(undefined) but not func()). In most native Node.js APIs, func(undefined) and func() are treated identically, and the ERR_INVALID_ARG_TYPE error code may be used instead."
  },
  "ERR_SOCKET_ALREADY_BOUND": {
    "en": "Used when an attempt is made to bind a socket that has already been bound."
  },
  "ERR_SOCKET_BAD_PORT": {
    "en": "Used when an API function expecting a port > 0 and < 65536 receives an invalid value."
  },
  "ERR_SOCKET_BAD_TYPE": {
    "en": "Used when an API function expecting a socket type (udp4 or udp6) receives an invalid value."
  },
  "ERR_SOCKET_CANNOT_SEND": {
    "en": "Used when data cannot be sent on a socket."
  },
  "ERR_SOCKET_DGRAM_NOT_RUNNING": {
    "en": "Used when a call is made and the UDP subsystem is not running."
  },
  "ERR_NO_CRYPTO": {
    "en": "Used when an attempt is made to use crypto features while Node.js is not compiled with OpenSSL crypto support."
  },
  "ERR_STDERR_CLOSE": {
    "en": "Used when an attempt is made to close the process.stderr stream. By design, Node.js does not allow stdout or stderr Streams to be closed by user code."
  },
  "ERR_STDOUT_CLOSE": {
    "en": "Used when an attempt is made to close the process.stdout stream. By design, Node.js does not allow stdout or stderr Streams to be closed by user code."
  },
  "ERR_UNKNOWN_BUILTIN_MODULE": {
    "en": "Used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself."
  },
  "ERR_UNKNOWN_SIGNAL": {
    "en": "Used when an invalid or unknown process signal is passed to an API expecting a valid signal (such as child.kill())."
  },
  "ERR_UNKNOWN_STDIN_TYPE": {
    "en": "Used when an attempt is made to launch a Node.js process with an unknown stdin file type. Errors of this kind cannot typically be caused by errors in user code, although it is not impossible. Occurrences of this error are most likely an indication of a bug within Node.js itself."
  },
  "ERR_UNKNOWN_STREAM_TYPE": {
    "en": "Used when an attempt is made to launch a Node.js process with an unknown stdout or stderr file type. Errors of this kind cannot typically be caused by errors in user code, although it is not impossible. Occurrences of this error are most likely an indication of a bug within Node.js itself."
  }
}
